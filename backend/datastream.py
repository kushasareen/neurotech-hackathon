import pandas as pd 
import time
from matplotlib import style
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt
import brainflow
import numpy as np
from brainflow.board_shim import BoardShim, BrainFlowInputParams, LogLevels, BoardIds
from brainflow.data_filter import DataFilter, FilterTypes, AggOperations
from brainflow.ml_model import MLModel, BrainFlowMetrics, BrainFlowClassifiers, BrainFlowModelParams
from matplotlib.animation import FuncAnimation
from random import random




BoardShim.enable_dev_board_logger()
    
params = BrainFlowInputParams()

#params.serial_port = "" # Change to appropriate port 

board_id = BoardIds.SYNTHETIC_BOARD #Using data generated by a synthetic board
board = BoardShim(board_id, params)

eeg_channels = BoardShim.get_eeg_channels(board_id)
sampling_rate = BoardShim.get_sampling_rate(board_id)
timestamp = BoardShim.get_timestamp_channel(board_id)

board.prepare_session()
board.start_stream()

def startStream(fig=None):
    
    """Lists to store separated eeg signals"""
    eeg1 = []
    eeg2 = []
    eeg3 = []
    eeg4 = []
    eeg5 = []
    eeg6 = []
    eeg7 = []
    eeg8 = []
    eeg9 = []
    eeg10 = []
    eeg11 = []
    eeg12 = []
    eeg13 = []
    eeg14 = []
    eeg15 = []
    eeg16 = []
    
    timex = [] #timestamps
    #while keep_alive == True:
    while board.get_board_data_count() < 250:
        time.sleep(0.005)
        
    data = board.get_current_board_data(250)
    
    eegdf = pd.DataFrame(np.transpose(data[eeg_channels]))
    eegdf_col_names = ["ch1", "ch2", "ch3", "ch4", "ch5", "ch6", "ch7", "ch8", "ch9", "ch10", "ch11", "ch12", "ch13", "ch14", "ch15", "ch16"]
    eegdf.columns = eegdf_col_names
    timedf = pd.DataFrame(np.transpose(data[timestamp]))

    #print("Showing data")
        #appending eeg data to lists
    eeg1.extend(eegdf.iloc[:, 0].values)
    #eeg2.extend(eegdf.iloc[:, 1].values)
    #eeg3.extend(eegdf.iloc[:, 2].values)
    #eeg4.extend(eegdf.iloc[:, 3].values)
        #eeg5.extend(eegdf.iloc[:, 4].values)
        # eeg6.extend(eegdf.iloc[:, 5].values)
        # eeg7.extend(eegdf.iloc[:, 6].values)
        # eeg8.extend(eegdf.iloc[:, 7].values)
        # eeg9.extend(eegdf.iloc[:, 8].values)
        # eeg10.extend(eegdf.iloc[:, 9].values)
        # eeg11.extend(eegdf.iloc[:, 10].values)
        # eeg12.extend(eegdf.iloc[:, 11].values)
        # eeg13.extend(eegdf.iloc[:, 12].values)
        # eeg14.extend(eegdf.iloc[:, 13].values)
        # eeg15.extend(eegdf.iloc[:, 14].values)
        # eeg16.extend(eegdf.iloc[:, 15].values)
    timex.extend(timedf.iloc[:, 0].values)  # timestamps
    if(fig != None):
    
        plt.cla()
        # plotting eeg data
        ax1 = fig.add_subplot(121)
        #ax2 = fig.add_subplot(122)
        
    
        ax1.plot(timex, eeg1,label="Channel 1", color="red")
        #ax2.plot(timex, eeg2, label="Channel 2", color="blue")
        
    # plt.plot(timex, eeg1, label="Channel 1", color="red")
    # plt.plot(timex, eeg2, label="Channel 2", color="blue")
    # plt.plot(timex, eeg3, label="Channel 3", color="orange")
    # plt.plot(timex, eeg4, label="Channel 4", color="purple")
        # plt.plot(timex, eeg5, label="Channel 5", color="red")
        # plt.plot(timex, eeg6, label="Channel 6", color="blue")
        # plt.plot(timex, eeg7, label="Channel 7", color="orange")
        # plt.plot(timex, eeg8, label="Channel 8", color="purple")
        # plt.plot(timex, eeg9, label="Channel 9", color="red")
        # plt.plot(timex, eeg10, label="Channel 10", color="blue")
        # plt.plot(timex, eeg11, label="Channel 11", color="orange")
        # plt.plot(timex, eeg12, label="Channel 12", color="purple")
        # plt.plot(timex, eeg13, label="Channel 13", color="red")
        # plt.plot(timex, eeg14, label="Channel 14", color="blue")
        # plt.plot(timex, eeg15, label="Channel 15", color="orange")
        # plt.plot(timex, eeg16, label="Channel 16", color="purple")
        plt.tight_layout()
    
    
    """Signal processing code"""
      
    """relaxation score calculation"""
    relax_score = round(random() * 100, 3)# Just some random garbage value. Need to change to ML code
    return relax_score
        
def main(i):

    
   
    style.use('fivethirtyeight')
    plt.title("Live EEG stream from Brainflow", fontsize=15)
    plt.ylabel("Data in millivolts", fontsize=15)
    plt.xlabel("\nTime", fontsize=10)
    fig = plt.gcf()
    keep_alive = True
    
    
    
    while keep_alive == True:
        
        startStream(fig)
        # resetting stream so that matplotlib can plot data
        keep_alive = False
    
        
  
  
if __name__ == "__main__":    
    ani = FuncAnimation(plt.gcf(), main, interval=1000) 
    plt.tight_layout()
    plt.autoscale(enable=True, axis="y", tight=True)
    print("Showing")
    plt.show()    
